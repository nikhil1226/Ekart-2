
*** ReactJS *** (v16)

___________________________________________________________________________________________________________________________________________

** Features of React **
- Virtual DOM.
- Server-side scripting.
- One-way data binding.
- JSX.

___________________________________________________________________________________________________________________________________________

* Advantages of React over Angular:
- In Angular, updating DOM is expensive. This is because, it works on the real DOM unlike React, which works on Virtual DOM.
- In React, it's easier to debug. This is because, it follows uni-directional data flow unlike Angular, which follows bi-directional.
- React consumes less memory, unlike Angular.

___________________________________________________________________________________________________________________________________________

* Angular vs. React:
- Two-way data binding. - One-way data binding.
- Bi-directional data flow. - Uni-directional data flow.
- Real DOM. - Virtual DOM. 
- MVC. - V.
- Client-side. -  Server-side.

___________________________________________________________________________________________________________________________________________


- React follows V pattern. 
- It doesn't allow the HTML elements to change the value.

___________________________________________________________________________________________________________________________________________

** Limitations of React **

- It's just a library, not a framework.

___________________________________________________________________________________________________________________________________________

** JSX **

- Fullform: JavaScript Extension.
- JavaScript that looks like HTML.
- It's just HTML-like syntax. Syntactical sugar.
- It's totally optional to use it.
- Compiles down to JavaScript.

___________________________________________________________________________________________________________________________________________

* props:
- It's shorthand for properties.
- It's a way of passing data from parent component to child component.
- It establishes the communication channel between the parent and child components.
- It's read-only (immutable).

___________________________________________________________________________________________________________________________________________

* state:
- It's just a JS object. 
- It's the local scope a react component.
- It stores the data of a react component.
- It's mutable.

___________________________________________________________________________________________________________________________________________

* props vs. state:
- immutable. - mutable.

_________________________________________________________________________________________________________________________________________

** super() in React **

- super() call is needed if you want to use "this" inside the constructor.
- super(props) call is needed if you want to use "this.props" inside the constructor.
- super(props) is optional in React.
- constructor() is optional in React.
- super() is required inside constructor.
___________________________________________________________________________________________________________________________________________

* Binding in React:

- React doesn't auto-bind "this" in ES 6 classes.
- We need to manually bind "this" value.

* Three approaches for binding manually:
1. Using bind() method inlinely.
2. Using bind() method in the constructor and
3. Using arrow function inlinely.

___________________________________________________________________________________________________________________________________________

* Class components or Stateful components or Container components or Smart components.
* Functional components or Stateless components or Presentational components or Dumb components. 

___________________________________________________________________________________________________________________________________________

* Class components vs.  Functional components:
 
___________________________________________________________________________________________________________________________________________

* Advantages of Functional components over Class components:

- Easy to write and understand.
- Very easy to test.
- "this" is not needed.

___________________________________________________________________________________________________________________________________________

* Disdvantages of Functional components over Class components:

- No state.
- We can't use life-cycle methods.
- We can't use refs.
- We can't connect to redux store.

___________________________________________________________________________________________________________________________________________

* Refs *

- shorthand for references.
- These are the attributes that used to store the reference to a particular node of DOM tree.

* Uses of refs *
- Manging the focus of a text field.

___________________________________________________________________________________________________________________________________________

** React Component Lifecycle **

* Phases of component lifecycle:
1. Initialization.
2. Mounting.
3. Updation.
4. Unmounting.

1. Initialization phase: 
- Initialization of state and give the defaultProps.
- Done in constructor() method.

2. Mounting phase:
- The react component will get mounted in the browser DOM.
- componentWillMount() --> render() --> componentDidMount().

3. Updation phase:
* A component can be updated in two ways:
(a) Sending new props from the parent.
- componentWillReceiveProps() --> shouldComponentUpdate() --> componentWillUpdate() --> render() --> componentDidUpdate().

(b) Calling setState() method.
- shouldComponentUpdate() --> componentWillUpdate() --> render() --> componentDidUpdate().

4. Unmounting phase:
- The component will get removed from the DOM.
 
___________________________________________________________________________________________________________________________________________

** Life-cycle Hook Methods **

* componentWillMount() :
- This method gets executed just before the component gets mounted in the DOM i.e. just before the first render .
- API calls shouldn't be placed in this method.
- This method is very similar to constructor() method.

* render():
- This method mounts the component in the DOM tree.

* componentDidMount():
- This method gets executed after the component is mounted in the DOM.
- API calls should be placed in this method.

* componentWillReceiveProps():
- This method gets executed when the parent sends new props. 
- The new props may be assigned to the state in this method (to maintain the synchronization).

* shouldComponentUpdate():
- It determines if the component should be re-rendered.
- It can prevent the re-rendering of a component, thereby optimizing the performance.
- It returns a boolean value. 
- By default, it returns true. 


* componentWillUpdate():
- This method gets executed if shouldComponentUpdate() returns true and just before the second render.

* componentDidUpdate():
- This method gets executed after the second render.

* componentWillUnmount():
- This method gets executed just before the component is removed from the DOM.

__________________________________________________________________________________________________________________________________________

** setState() **

- It's an asynchronous operation.
- If there are many setState() calls one after the other, we won't get the expected result.
- So, to avoid this race condition, setState((prevState => {}) should be used.
___________________________________________________________________________________________________________________________________________

** Virtual DOM **

- In general, updating DOM is expensive (time-taking) i.e. slow.
- Virtual DOM is a copy of Real DOM.
- React doesn't update the Real DOM directly. First, it updates the Virtual DOM, then it makes the updates to the Real DOM all at once.
- AngularJS uses Dirty Checking (Digest Cycle), whereas ReactJS uses Observables.
- Whenever setState() method is called on any component, the component gets re-rendered.
- Whenever setState() method is called, ReactJS creates the whole Virtual DOM from scratch (creating a whole tree is very fast). 
- ReactJS maintains two virtual DOMs, one with the updated state Virtual DOM and other with the previous state Virtual DOM.
* Reconciliation: It is the process to determine which parts of the Real DOM need to be updated.
- ReactJS using diff algorithm compares both the Virtual DOMs to find the minimum number of steps to update the Real DOM.
- Batch Update: During the event loop, there is exactly one time when the Real DOM is being painted.

___________________________________________________________________________________________________________________________________________

* Uncontrolled elements:
- Initial value is not set.
- refs are used.
- no onChange handler.

* Controlled elements:
- Set the initial value as a prop.
- onChange handler.
- Synchronized with the state always.  

___________________________________________________________________________________________________________________________________________

* Higher order components:
- It's a function that takes a component as an argument and returns a component.
- It transforms the sent component, by adding new props.
- It's a pure function.

* When to use a HOC:
- Share the same functionality across multiple components (Reusability). Eg. state abstraction.

___________________________________________________________________________________________________________________________________________

* Pure component:
- It's just a normal component, except it handles shouldComponentUpdate() for you.
- It'll do a shallow comparision on props and state.

___________________________________________________________________________________________________________________________________________

* Key:
- It's used to uniquely identify the components.
- It's useful when there're dynamically created components.
- It boosts the performance, by preventing the re-rendering. 
___________________________________________________________________________________________________________________________________________

** Axios **

* Axios is a promise-based Ajax tool.

___________________________________________________________________________________________________________________________________________

** React Router (v4)**

- only react-router-dom is used. react-router is not needed.

* <BrowserRouter>: Used for dynamic websites.
* <HashRouter>: Used for static websites.
* <MemoryRouter>

* history: It's an object that keeps track of current location.
* location object

* Context.

* <Route>:
- It is the building block of react router.
- It renders the content based on the current location's pathname.

* <Switch>:
- It's used when you want to display only a single route to be rendered amongst the several defined routes.
- Renders the first match.

- exact and strict.
- path-to-regexp.

* Three ways:
1. <Route path="/users" component={}  />.
2. <Route path="/users" render={}  />.
- Inline rendering.
- We can pass extra props to a component. 
3. <Route path="/users" children={}  />.
- route will always be rendered, regardless of matching.

* Difference between component and render.
- render is slower than component.
- component uses React.createElement().
- render uses function call.

- When the route's "path" prop matches with the current location, an object called "match" is created.

* match object has the following properties:
* url - The matched part of current location's pathname.
* path - The route's path.
* isExact - path === pathname.
* params - An object that has the route parameters/ path parameters.

* Nested Routes.

* <Link to="" /> or <Link to={{}}> (location object goes here):
- Navigate between pages without reloading. 

* <NavLink to="" />
- Link highlighting.

___________________________________________________________________________________________________________________________________________






