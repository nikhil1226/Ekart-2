
** Resources **

* https://www.valentinog.com/blog/react-redux-tutorial-beginners/
* https://css-tricks.com/learning-react-redux/
* https://redux.js.org/
* https://www.smashingmagazine.com/2016/06/an-introduction-to-redux/
* https://egghead.io/lessons/react-redux-pure-and-impure-functions

___________________________________________________________________________________________________________________________________________

* Why a state manager is required?

- Component-to-component communication, where there is no direct parent-child relationship is error prone.
- Components "dispatch" state changes to the store, not directly to other components. The components that need to be aware of state changes can "subscribe" to the store.

___________________________________________________________________________________________________________________________________________

*** Flux ***

- Flux is a data flow architecture/pattern.
- It enforces uni-directional data flow.

* Data flow in Flux:
 Action --> Dispatcher --> Store.

___________________________________________________________________________________________________________________________________________

*** Redux ***

- It's a state management library.
- It's an implementation of Flux (data flow architecture).
- It should be used only in complex applications.
- It uses the concepts of Functional programming.

___________________________________________________________________________________________________________________________________________

** Flux vs. Redux **

- Multiple stores. - Single store.
- State is mutable. - State is immutable.
- Business logic is present in store. - Business logic is present in reducer.
- No Reducer. - Reducer.
- Dispatcher. - No Dispatcher.


___________________________________________________________________________________________________________________________________________


* Principles of Redux:
1. Single source of truth.
- The state of the entire application is stored in an object / state tree within a single store. The single state tree makes it easier to keep track of changes over time and debug the application.
2. State is immutable (read-only). The only way to change the state is to emit an action.
3. Changes are made with pure functions called reducers.

___________________________________________________________________________________________________________________________________________

** Redux components **

* Action:
- It’s an JS object that describes what has happened.
- It has type and payload properties.
- It can be wrapped in a action creator function.

* Action creators return actions.

* Reducer:
- It is a function that changes the state, based on the action.
- It's a pure function that takes previous state and action as arguments and returns the next state.
- It doesn't mutate the previous state, since the state is immutable in Redux.
- It has a switch statement on action's type property.
- returns Object.assign() or object spread syntax.
- API calls must not be placed inside this.

* Actions only describe what happened, but don't describe how the application's state changes.

* Store:
- It's the place where the state of whole application lives.

* View:
- It displays the data provided by the store.

___________________________________________________________________________________________________________________________________________

* Pure function in JavaScript: (Functional programming concept)
- It doesn't transform the passed argument. Its arguments should be considered "immutable", meaning they should not be changed.
- Its return value depends solely on the values of its parameters.
- Calling a pure function with the same set of arguments will always return the same value.
- No side-effects.
- Eg. Array.prototype.concat().

* Benefits of pure functions:
- Easier to test, maintain and debug.

___________________________________________________________________________________________________________________________________________

* Three helper methods of store object are:
- store.getState() - It returns the current state of the application.
- store.dispatch(action) - It's used to dispatch an action.
- store.subscribe(listener) - It provides a callback function which gets executed when the state changes.

** methods of redux:
- combineReducers().
- createStore().

___________________________________________________________________________________________________________________________________________

** react-redux (v5) **

- It's a library that is used to connect React with Redux.

* <Provider>:
- It's a higher order component that connects the whole application with the redux store.
- The whole application is wrapped inside this component.
- Syntax: 
 <Provider store={}>
  	<App />
 </Provider>

* connect(): 
- It connects a React component with the redux store.
- mapStateToProps() and mapDispatchToProps() can be passed as arguments to connect(). 
- It takes at least one argument.
- Syntax: connect( mapStateToProps, mapDispatchToProps)(componentName);

* mapStateToProps():
- It connects an exact part of redux state to the props of a react component, what it needs.
- A react component gets the access to a part of redux store, it needs.

* mapDispatchToProps():
- It connects redux actions to the props of a react component.
- With this, a react component can dispatch the actions.

___________________________________________________________________________________________________________________________________________





















