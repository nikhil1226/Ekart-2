
* JavaScript is a: 
1. Interpreted programming language.
2. Loosely typed programming language.
3. Prototype-based programming language.

- window is the global object.

- "this" is reference to an object.

- JS objects have properties and methods. Both are in key-value pairs.

- typeof [] returns object.
- typeof myFunc returns function.
- "typeof undefined" returns undefined.
- "typeof null" returns object.
- "typeof NaN" returns number.

- "undefined" and "null" are equal in value but different in type.
- undefined == null 
returns true.

- undefined === null returns 
false.

* Output of:
if("") {
console.log("hello world");
}

* One can access object properties in two ways: 
- objectName.propertyName - dot notation.
- objectName["propertyName"] - bracket notation.

* Prototype:
- All JavaScript objects inherit properties and methods from a prototype.
- Array objects inherit from Array.prototype.
- The Object.prototype is on the top of the prototype inheritance chain.
- Array objects inherit from Object.prototype too.

* Prototype: It allows the JS objects to inherit features from one another.

* Prototype chain.

* Prototypal Inheritance.

* String.prototype.split():
- It can be called on a string.
- It returns an array.
- If the separator is "", the returned array will be an array of single characters.
- If there is no separator, the returned array will contain the whole string in index [0].

* for/of loop Vs for/in loop (when iterated on an array):
- currentItem Vs index

- NaN is not equal to anything, including NaN.

* Removing the duplicates from an array. Hint: use indexOf().

* Merge sub-arrays into an array:
- "arr" has sub-arrays.
- [].concat.apply([], arr);

* var: function scope Vs  let: block scope

- In functions, local variables have higher priority than global variables.

* Global variable: 
- Declared outside a function.
- Declared without "var" inside a function.

- Scope inside setTimeout() function is global scope (window object).

* Serialize: JSON.stringify() - converts a JS object into a string.

* Deserialize: JSON.parse() - converts a string into a JS object.

- A function returns "undefined" by default.

* Array.prototype.reduce(): Adds all the items in an array (Reduces 
to a single value).

* IIFE (Immediately Invoked Function Expression): self invoked function.

* Rest parameters:  It represents an indefinite number of arguments as an array (...args). 
- arguments is an array-like object.
- args is an array.

*Destructuring Assignment: Unpacks values from an array or properties from an object.

* JavaScript objects can be created by:
- Object literals.
- "new" keyword (constructor). Constructor function.
- new Object().
- Object.create().

- Prototypes are the mechanism by which JavaScript objects inherit features from one another.

- "prototype" property is used to add new properties / methods to an object constructor.

___________________________________________________________________________________________________________________________________________

** HTML DOM **


- With the HTML DOM, JavaScript can access and change the elements of an HTML document.
- All the HTML elements are objects.
- It has methods (eg. getElementById() ) and properties (eg. innerHTML).
- "document" object is the owner of all the objects.
- "document" object represents the web page.
- "html" is the root element.

___________________________________________________________________________________________________________________________________________

** ES 6 Features **

- let and const.
- Template literals.
- Multi-line strings.
- Arrow functions.
- Default parameters.
- Rest parameters.
- Destructuring assignment.
- Classes.
- Modules.
- Enhanced object literals.
- Promises.
- for/of loop.
- Generators.
- Map and Set.

___________________________________________________________________________________________________________________________________________


** Arrow functions **


- don't have lexical scope ( they take the outer scope ).
- don't have "arguments" parameter.


___________________________________________________________________________________________________________________________________________

** Events in JS **


* There are three ways to assign event handlers:
1. HTML Attributes. eg. onclick="".
2. DOM Property. eg. elem.onclick = function.
3. addEventListener("eventName", function, useCapture).

- Using 2nd way, multiple handlers can't be given.
- Using 3rd way, multiple handlers can be given.
- In all the three ways, event (object) is the first argument in the handler.

* addEventListener():
- It supports objects as event handlers.
- Its third parameter of addEventListener() is a boolean value specifying whether to use event bubbling or event capturing.
- You can specify the propagation type by using the "useCapture" parameter ( 3rd parameter ). 
* useCapture - The default value is false, which will use the bubbling propagation, when the value is set to true, the event uses the capturing propagation.

* There are 3 phases in event propogation:
1. Capturing phase - the event goes down to the element (only addEventListener handlers are executed on the way).
2. Target phase - the event reached the target element.
3. Bubbling phase - the event bubbles up from the element (all the handlers are executed on the way).

* Event Bubbling: 
- When an event occurs on an element, it first runs the handlers on it, then on its parent and then all the way up on other ancestors.

* event.target: The target element that initiated the event (the deepest element).

* event.currentTarget: The current element.

* event.stopPropogation(): To stop event bubbling.

* event.stopImmediatePropogation(): To stop event bubbling and prevent any other handlers from executing.

* Event Delegation: If we have a lot of elements handled in a similar way, then instead of assigning handlers to each of them, we put a     		single handler on their common ancestor.

___________________________________________________________________________________________________________________________________________


** Data Types in JS **

- There are 6 data types in JS.
* Primitive Data Types: Number, String, Boolean Undefined and Null.
* Derived Data Type: Object.
- Primitive Data Types are immutable.
- Derived Data Type ( Object ) is mutable. 

___________________________________________________________________________________________________________________________________________


** Callback functions **


* Callback function or Higher-order function: A function that is passed to another function as a parameter.
- It gets executed at some later time.

___________________________________________________________________________________________________________________________________________


** Closures **


- Closure is a inner function that still has access to outer function's variables even after the outer function has returned.

___________________________________________________________________________________________________________________________________________


** call(), apply(), bind() functions**


* Uses of call(), apply(), bind():
- Set 'this' value explicitly while invoking the function.
- Borrow methods.

* Function Currying: Use of a function that returns a new function with some of the arguments already set.

- bind() allows us to curry a function.

* Difference between call() and apply(): In apply(), the arguments can be passed as an array.

- Variadic functions.

- An array can be passed into apply() method.

- Array-like objects. eg. arguments

___________________________________________________________________________________________________________________________________________


** Hoisting **


- Only variable declarations get hoisted, but not the variable assignments.

- Function expressions don't get hoisted.

- Function declarations take precedence over variable declarations, but not over variable assignments.

___________________________________________________________________________________________________________________________________________







