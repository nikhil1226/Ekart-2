** Angular **

- Angular 1.x is a MVW framework.
__________________________________________________________________________________________________________________________________________

** AngularJS vs. Angular **

- Angular is 5x faster than AngularJS.

- No mobile support.
- Controllers. 
- Scope. 
- Not SEO-friendly.
- No Server-side rendering.

vs.

- Mobile support.
- No Controllers (Angular is completely component-based).
- No Scope.
- SEO-friendly.
- Server-side rendering (Angular Universal).

__________________________________________________________________________________________________________________________________________

* Angular 3?
- To prevent the conflict with router package, Angular 3 was skipped (so that, all the packages will be aligned).

- Two way data-binding using [( )]. Banana in a box.

___________________________________________________________________________________________________________________________________________

** main.ts **

- The application startup process is called bootstrapping.

* main.ts file - It's the main entry point for an angular application. Compilation (TS to JS) and Bootstrapping (starting) of the application happens in this file.

* Types of compilation:
- JIT Compilation.
- AOT Compilation.

* JIT (Just-in-Time) compilation:
- At run time.
- Used in development environment.

* AOT (Ahead-of-Time) compilation:
- Compilation during the build phase before the browser downloads and runs that code.
- At build time.
- Used in production environment.
- 3x faster than JIT.

* Bootstrapping of an Angular application:
- platformBrowserDynamic().bootstrapModule(AppModule);

- Specify the root component in bootstrap array.

___________________________________________________________________________________________________________________________________________

** Angular 2 vs. Angular 4 **

- The bundled file size has been reduced by 60%!
* Integration of Angular Universal - Inclusion of separate "@angular/platform-server" package for server-side rendering. renderModuleFactory. 
- Animations have got their own package.
- <template> became <ng-template>.
- *ngIf with else.
- A new pipe called titlecase.
- TypeScript 2.1 and 2.2 compatibility.

___________________________________________________________________________________________________________________________________________

** Advantages of TypeScript over JavaScript **

- Type checking is possible (just like Java).
- Strong typing.
- Errors can be caught at compile time.
- Better intellisense in IDEs.
___________________________________________________________________________________________________________________________________________

* Server-side rendering:
- Rendering DOM from server requests.
- The HTML content of DOM will be stored in the server. And when the content is needed, browser will request the server.
___________________________________________________________________________________________________________________________________________

* Mobile support of Angular:
- Angular has application layer and rendering layer. Based on the device, component will be rendered.

___________________________________________________________________________________________________________________________________________

* Benefits of Angular Services: 
- Can be easily shared across multiple components.
- Can be easily mocked for testing purposes. 
___________________________________________________________________________________________________________________________________________

** Dependency Injection ** 

- A design pattern and mechanism for creating and delivering parts of an application (dependencies) to other parts of an application that require them. 

* "Singleton(Single instance)" feature of Dependency Injection. Benefits of "Singleton" - data can be shared across multiple components.

* Injector maintains the single instance of a dependency.

** Providers **
- A provider is an instruction to the DI system on how to obtain a value for a dependency. Most of the time, these dependencies are services that you create and provide.
- A provider of an injectable service—specifically, a code recipe associated with a DI token, which an injector uses to create a new instance of a dependency for a class that requires it.
- The Injector uses provider to create new instances.
- A provider is a recipe for creating a dependency.

___________________________________________________________________________________________________________________________________________

* Benefits of Components:
- Reusable.
- Easily testable.
___________________________________________________________________________________________________________________________________________

** Template-driven forms **

- ngForm - <form #myForm="ngForm">
- ngSubmit - <form (ngSubmit)="submitted(myForm)">
- ngModel - <input type="text" ngModel #name="ngModel" />
- myForm.form.valid
- Properties: valid, invalid, touched, untouched, dirty, pristine.
___________________________________________________________________________________________________________________________________________

** Reactive forms **

- Also called Model-driven forms.
- Import ReactiveFormsModule.

* FormControl:
- name: new FormControl();
- <input type="text" [formControl]="name" />
- <input type="text" formControlName="name" />
- FormControl constructor.

* FormGroup:
- <form [formGroup]="myForm">
- myForm = new FormGroup().
- FormGroup constructor.

* FormBuilder:
- It's a service.
- Inject it's instance.
- private fb:FormBuilder
- fb.group()

* Validators:
- Validators.required.
- Validators.minLength.
- Validators.maxLength.
- Validators.pattern.

* Validation errors:
- *ngIf="myForm.controls.email.invalid".
___________________________________________________________________________________________________________________________________________

** Template-driven forms Vs Reactive forms **
- Less control over validation logic. Vs - More control over validation logic (complex forms with custom validations).
- Can't be unit tested. Vs - Can be unit tested. 
- Form model is generated automatically. Vs - Form model is generated manually.

___________________________________________________________________________________________________________________________________________

** Built-in Modules in Angular **

1. BrowserModule.
2. FormsModule.
3. RouterModule.
4. ReactiveFormsModule.
5. HttpClientModule.
6. CommonModule.
___________________________________________________________________________________________________________________________________________

* View children - The child components whose element tags appear within the component's template.
* Content children - The children enclosed in the opening and closing tags of a component. The child components that Angular projected into the component.

* @ViewChild - It's used to get access to a child component / a DOM element from a parent component (View DOM).
* @ViewChildren - It's used to get access to multiple child components from a parent component (View DOM).
* @ContentChild - the child components that Angular projected into the component. <ng-content>
* @ContentChildren - (Content DOM).
* <ng-content>: placeholder for the external content. Project some content into a component.
___________________________________________________________________________________________________________________________________________

** Component lifecycle in Angular **

* Phases:
1. Creating - Initializations. 
2. Rendering - Inserting into the DOM.
3. Destroying - Removing from the DOM. 

___________________________________________________________________________________________________________________________________________

** Life-cycle hooks in Angular **

* Sequence:
- constructor() --> ngOnChanges() --> ngOnInit() --> ngDoCheck() --> ngAfterContentInit() --> ngAfterContentChecked() --> 	ngAfterViewInit() --> ngAfterViewChecked() --> ngOnDestroy().


* constructor():
- constructor is used for initializing class members and also used for dependency injection. 

* ngOnChanges(SimpleChanges):
- It's called when the data-bound input properties change.
- This method receives a SimpleChanges object of currentValue and previousValue.

* ngOnInit():
- Complex initializations.
- API calls are placed in this method.

* ngDoCheck():
- Detect and act upon changes.
- It's called after every run of change detection.

* ngAfterContentInit():
- It gets called after the component's content is fully initialized.
- Content children are initialized in this method.

* ngAfterContentChecked():
- Gets executed after every check of component's content.
- Called after every ngDoCheck().

* ngAfterViewInit():
- It gets called after the component's view(s) and child views is/are fully initialized.
- View children are initialized in this method.

* ngAfterViewChecked():
- Gets executed after every check of component's view(s).
- Called after every ngAfterContentChecked().

* ngOnDestroy():
- Cleanup just before the component gets removed from the DOM.
- Unsubscribe the observables and detach event handlers to avoid memory leaks.
- Kill the authentications tokens. 

___________________________________________________________________________________________________________________________________________

* Differences between ActivatedRoute and RouterState.

___________________________________________________________________________________________________________________________________________

* There are three kinds of directives in Angular:
1. Components - directives with templates.
2. Attribute directives - change the appearance or behavior of DOM elements.
3. Structural directives - change the DOM layout by adding and removing DOM elements.

___________________________________________________________________________________________________________________________________________

* Safe navigation operator.


** Structural Directives **

- Structural directives are responsible for HTML layout. They shape or reshape the DOM's structure, typically by adding, removing, or manipulating elements. Eg. *ngIf, *ngFor, ngSwitch, *ngSwitchCase, *ngSwitchDefault.
- You can only apply one structural directive to a host element.
- *ngIf=" " vs. [style.display]="'none'" vs. [hidden]=" " vs. [ngStyle]=" " 

*ngIf:
- The ngIf directive doesn't hide elements with CSS. It adds and removes them physically from the DOM.

*ngFor:
- Syntax: *ngFor="let hero of heroes".

* ngSwitch:
- <div [ngSwitch]="hero?.emotion">.
- *ngSwitchCase="' '" and *ngSwitchDefault.

___________________________________________________________________________________________________________________________________________

** Attribute Directives **
- Eg. ngStyle, [hidden] etc.,
 
___________________________________________________________________________________________________________________________________________

** Interpolation:
- {{ }} - Template Expression.

** Property Binding:
- [ ].

** Event Binding:
- ( ).

___________________________________________________________________________________________________________________________________________

* Decorators:
- add meta data to the classes.
- extend a class and configure it.
- it is nothing more than a function call that is passed a set of arguments prior to running the neighboring function/class.

1. @Component().
2. @Input().
3. @Output().
4. @NgModule().
5. @Injectable().
6. @Pipe().
7. @HostBinding().
8. @ViewChild().
9. @ViewChildren().
10. @ContentChild().
11. @ContentChildren().
__________________________________________________________________________________________________________________________________________

** Communication between two components in Angular **

- @Input, property binding. 
- @Output and EventEmitter. Emit an custom event. Event binding.
* RxJs BehaviorSubject:
- next().
- subscribe().

___________________________________________________________________________________________________________________________________________

** Template reference variables in Angular **
- # symbol.
- We can access the values of DOM elements.
___________________________________________________________________________________________________________________________________________

** Data binding **

* Data binding allow apps to display data values to a user and respond to user actions (such as clicks, touches, and keystrokes).

* Ways of data binding in Angular:
* Interpolation - {{ }}.
* Property binding - [ ].
* Event binding - ( ).
* Attribute binding.
* Class binding - [class].
* Style binding - [style].
* Two-way data binding with ngModel - [(ngModel)]. - Synchronization between input value and component class property.
___________________________________________________________________________________________________________________________________________

** @ngModule() **

* declarations: [ ] - components and pipes of this module are declared.
* imports: [ ] - We can import dependant modules.
* exports: [ ] - Place the components.
* providers: [ ] - Services are registered here.
* bootstrap: [ ] - Root component(s) is/are placed in this array.
___________________________________________________________________________________________________________________________________________

** Registering Services **

* Services can be registered at any two levels (in providers: [ ]): module level and component level. 
* Difference:
- When you register a service at the module level, the same instance of the service is available to all components.
- When you register a service at the component level, new instance of the service is available to each component.

___________________________________________________________________________________________________________________________________________

** Angular Routing **

- <base href="/">

* RouterModule.forRoot(routeConfigArr, configObj?)
- It creates a module that contains all the directives, the given routes, and the router service itself.
- It configures the routes.

* configObj:
- enableTracing: makes the router log all its internal events to the console.
- useHash: enables the location strategy that uses the URL fragment instead of the history API.
- initialNavigation: disables the initial navigation.
- errorHandler: provides a custom error handler.
- preloadingStrategy: configures a preloading strategy 
- onSameUrlNavigation: configures how the router handles navigation to the current URL. See ExtraOptions for more details.

* RouterModule.forChild(routeConfigArr)
- It creates a module that contains all the directives and the given routes, but does not include the router service.
- It is used to configure the routes of lazy loaded modules.

* forRoot() vs. forChild():
- routes, directives and router service. vs. - routes, directives and no router service.
- contains injector configuration. vs. - doesn't contain injector configuration.

** Lazy Loading **
- Splits the application into multiple bundles and load them on demand, when requested, when required, only when user navigates to that particular route.
- Dynamically load the modules.
- Reduces the initial load time.
- Improves the application's performance.
- loadChildren: 'app/admin/admin.module#AdminModule';
- canLoad: guarding unauthorized loading of feature modules.

* Preloading: After each successful navigation, the router looks in its configuration for an unloaded module that it can preload.

* Child routing:
- children: [ { } ].
- Placement of <router-outlet>.
- routerLink="[id]"

- routerLink

* [routerLink]="[ ]"
- link parameters array.

* redirectTo=" " pathMatch=" "

* routerLinkActive="active"
- Adds active class when the routerLink is active.

* <router-outlet>:
- views get inserted in this.

* ActivatedRoute service:
- capture the route parameters.

* ParamMap API.

- Retrieve the route parameters.

* Router service:
- navigate( ) method.
- routerState property. 

* ActivatedRoute:
- A service that is provided to each route component that contains route specific information such as route parameters.

* RouterState:
- The current state of the router including a tree of the currently activated routes together with convenience methods for traversing the route tree.

* Difference between ActivatedRoute and RouterState?

* Route Guards:
- canActivate
- canDeactivate
- canLoad

- resolve

- Eager loading - Pre loading - Lazy loading

___________________________________________________________________________________________________________________________________________

** RxJS **

* RxJS is a javascript library that brings the concept of "reactive programming" to the web.

* Operators as a way to manipulate the data coming from an Observable.

- Operators are pure functions. They take an observable as an argument and return a new observable.

- Http doesn't actually make the request to the server until there is a subscription to the observable.

- Observables return multiple values (stream) over time.
- Can retry using retry operator.
- Lazy loading.
- Cancellable using unsubscribe() method.

- map( )
- filter( )
- do( )
- catch( )
- reduce( )

* BehaviorSubject:
- next( )
- subscribe( )

* Caching in observales:
- Observable.cache operator.
- We can store the response in the browser's cache and then, on the next subscription, instead of requesting the remote server again.
* http://www.syntaxsuccess.com/viewarticle/caching-with-rxjs-observables-in-angular-2.0

** Promises Vs RxJS Observables **

- Promises are only called once and will return a single value. 
- Can't retry.
- No Lazy loading. 
- Not cancellable.

vs.

- Observables return multiple values (stream) over time.
- Can retry using retry operator.
- Lazy loading.
- Cancellable using unsubscribe() method.

* Observable
- A producer of multiple values, which it pushes to subscribers.
___________________________________________________________________________________________________________________________________________

* In custom directives:
* @HostBinding( ):
- Used to set properties on the host element / component. 

* @HostListener( ):
- Used to listen events on the host element / component.

- Eg. <input customDirective>
___________________________________________________________________________________________________________________________________________

** Angular CLI **

- The Angular CLI is a command-line tool that can create a project, add files, and perform a variety of ongoing development tasks such as testing, bundling, and deployment.
- We can create boilerplate code using Angular CLI.
- Eg. ng generate directive directiveName.
 
- ng install -g @angular/cli.
- ng new myApp.
- ng generate component sample.
- ng generate module sample.
- ng serve.
- ng test.
- ng build.
- ng deploy.
___________________________________________________________________________________________________________________________________________